<?xml version="1.0"?>
<!-- Project main sitemap. -->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:views>
    <map:view from-label="content" name="content">
      <map:serialize type="xml" />
    </map:view>

    <map:view from-label="tei" name="tei">
      <map:serialize type="xml" />
    </map:view>
  </map:views>

  <map:pipelines>
    <!-- Mount sub-sitemaps. -->
    <map:pipeline id="local-mount">
      <!-- Mount a sitemap for any private URLs, such as editorial
           processes like Schematron validation. -->
      <map:match pattern="private/**">
        <map:mount check-reload="yes" src="private.xmap" uri-prefix="private/"
         />
      </map:match>
    </map:pipeline>

    <map:pipeline id="local-images">
      <map:match pattern="images/**.gif">
        <map:read mime-type="image/gif" src="../../content/images/{1}.gif" />
      </map:match>

      <map:match pattern="images/**.jpg">
        <map:read mime-type="image/jpeg" src="../../content/images/{1}.jpg" />
      </map:match>

      <map:match pattern="images/**.png">
        <map:read mime-type="image/png" src="../../content/images/{1}.png" />
      </map:match>
    </map:pipeline>

    <map:pipeline type="noncaching">
      <map:match pattern="">
        <!-- Redirect request to the root path to the index page. -->
        <map:redirect-to uri="index.html" />
      </map:match>
      
      <map:match pattern="notation/**/*/*">      
        <map:generate src="cocoon://music/musicxml2mei/{1}"/>
        <map:transform type="saxon" src="../stylesheets/local/musicJSON.xsl">
          <map:parameter name="startm" value="{2}" />
          <map:parameter name="endm" value="{3}" />
        </map:transform>
        <map:serialize type="text" mime-type="application/json" />
      </map:match>
      
      <map:match pattern="index.html">
        <map:aggregate element="aggregation" label="content">
          <map:part src="cocoon://_internal/menu/main.xml" />
          <map:part src="cocoon://_internal/metadata/files.xml"/>
        </map:aggregate>
        <map:transform src="cocoon://_internal/template/duchemin.xsl">
          <map:parameter name="filedir" value="." />
          <map:parameter name="fileextension" value="html" />
        </map:transform>
        <map:serialize type="xhtml"/>
      </map:match>
      
      <map:match pattern="music/*/*/*/*">      
        <map:generate src="cocoon://music/musicxml2mei/{1}_XML%2F{1}{2}.xml"/>
        <map:transform type="saxon" src="../stylesheets/local/musicHTML.xsl">
          <map:parameter name="startm" value="{3}" />
          <map:parameter name="endm" value="{4}" />
        </map:transform>
        <map:serialize />
      </map:match>

      <map:match pattern="**.html">
        <map:aggregate element="aggregation" label="content">
          <map:part src="cocoon://_internal/menu/main.xml" />
          <map:part label="tei" src="cocoon://internal/tei/preprocess/{1}.xml"
           />
        </map:aggregate>
        <map:transform src="cocoon://_internal/template/tei.xsl">
          <map:parameter name="filedir" value="." />
          <map:parameter name="filename" value="{1}.xml" />
          <map:parameter name="fileextension" value="html" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
    
    <!-- preprocessing -->
    <map:pipeline>
      <!-- 1. MusicXML cleanup -->
      <map:match pattern="music/cleanup/**.xml">
        <map:generate src="../content/xml/musicXML/{1}.xml"/>
        <map:transform src="../stylesheets/local/cleanup.xsl" />
        <map:serialize type="xml" />
      </map:match>
      <!-- 2. MusicXML partwise to timewise -->
      <map:match pattern="music/musicxmlTW/**.xml">
        <map:generate src="cocoon://music/cleanup/{1}.xml"/>
        <map:transform src="../stylesheets/local/parttime.xsl" />
        <map:serialize type="xml" />
      </map:match>
      <!-- 3. MusicXML timewise to MEI -->
      <map:match pattern="music/musicxml2mei/**.xml">
        <map:generate src="cocoon://music/musicxmlTW/{1}.xml"/>
        <map:transform src="../stylesheets/local/musicxml2mei-2.2.3.xsl" />
        <map:transform src="../stylesheets/local/post.xsl" />
        <map:serialize type="xml" />
      </map:match>
    </map:pipeline>

    <map:pipeline internal-only="true">
      <!-- Process a TEI document prior to its use in another
           pipeline, normalising and annotating it as required. -->
      <map:match pattern="internal/tei/preprocess/**.xml">
        <map:generate src="../content/xml/tei/{1}.xml" />
        <map:transform src="../kiln/stylesheets/tei/join-elements.xsl" />
        <map:transform src="../kiln/stylesheets/tei/annotate.xsl" />
        <map:serialize type="xml" />
      </map:match>
    </map:pipeline>
    
    <!-- Metadata pipeline. -->
    <map:pipeline id="kiln-metadata" internal-only="true">
      <map:match pattern="_internal/allxmlcontent.xml">
        <map:generate src="../content/xml" type="directory">
          <map:parameter name="depth" value="99" />
          <map:parameter name="exclude" value="^\..*" />
        </map:generate>
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="_internal/metadata/files.xml">
        <map:generate src="cocoon://_internal/allxmlcontent.xml" />
        <map:serialize type="xml" />
      </map:match>
    </map:pipeline>
    
  </map:pipelines>
</map:sitemap>
